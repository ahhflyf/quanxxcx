const url = `https://vipclub.lcmsh.com:52501/api/Sign/SignIn`;
const method = `POST`;
const headers = {
'Accept-Encoding' : `gzip,compress,br,deflate`,
'content-type' : `application/json`,
'Connection' : `keep-alive`,
'Referer' : `https://servicewechat.com/wx69b248b2436cf763/53/page-frame.html`,
'buildingid' : `LCM`,
'Host' : `vipclub.lcmsh.com:52501`,
'Authorization' : `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxODAxMTAwNjE5IiwianRpIjoiMmFiZmU2MGMtYTBlZi00MDQ5LWE2MTgtNzYyOTk5MTliOWQ3IiwiaWF0IjoxNjg0MjI0MTU2LCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3ByaW1hcnlncm91cHNpZCI6ImFwaS5hcHAubWVtYmVyIiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvbmFtZSI6IjE4MDExMDA2MTkiLCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3JvbGUiOiJtZW1iZXIiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9zaWQiOiJtZW1iZXIiLCJkYXRhZnJvbSI6IldYIiwidG9rZW5lZmZlY3RpdmVjaGVjayI6IjEiLCJ2aXBjb2RlIjoiMTgwMTEwMDYxOSIsIm9wZW5pZCI6Im9DWXBFNVpCWjFCUjJYZVB6WUlZNWtaN1p6RFEiLCJuYmYiOjE2ODQxNjY1NTYsImV4cCI6MTY4NDM0NjU1NiwiaXNzIjoiZnoudjUuYXBpIiwiYXVkIjoiZnoudjUuYXBwIn0._gWGYWhiCOK5m2MJOIhPq9kP078mFLDTomtqdan3GuE`,
'User-Agent' : `Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 MicroMessenger/8.0.32(0x18002038) NetType/WIFI Language/zh_CN`
};
const body = `null`;

const myRequest = {
    url: url,
    method: method,
    headers: headers,
    body: body
};


$task.fetch(myRequest).then(response => {
    console.log(response.statusCode + "\n\n" + response.body);
const lcmresult = JSON.parse(response.body);
$notify("lcm签到" + lcmresult.success);
    $done();
}, reason => {
    console.log(reason.error);
    $done();
});


function init() {
  isSurge = () => {
    return undefined === this.$httpClient ? false : true
  }
  isQuanX = () => {
    return undefined === this.$task ? false : true
  }
  getdata = (key) => {
    if (isSurge()) return $persistentStore.read(key)
    if (isQuanX()) return $prefs.valueForKey(key)
  }
  setdata = (key, val) => {
    if (isSurge()) return $persistentStore.write(key, val)
    if (isQuanX()) return $prefs.setValueForKey(key, val)
  }
  msg = (title, subtitle, body) => {
    if (isSurge()) $notification.post(title, subtitle, body)
    if (isQuanX()) $notify(title, subtitle, body)
  }
  log = (message) => console.log(message)
  get = (url, cb) => {
    if (isSurge()) {
      $httpClient.get(url, cb)
    }
    if (isQuanX()) {
      url.method = 'GET'
      $task.fetch(url).then((resp) => cb(null, {}, resp.body))
    }
  }
  post = (options, callback) => {
    if (isQuanX()) {
      if (typeof options == "string") options = { url: options }
      options["method"] = "POST"
      $task.fetch(options).then(response => {
        response["status"] = response.statusCode
        callback(null, response, response.body)
      }, reason => callback(reason.error, null, null))
    }
    if (isSurge()) $httpClient.post(options, callback)
  }
  done = (value = {}) => {
    $done(value)
  }
  return { isSurge, isQuanX, msg, log, getdata, setdata, get, post, done }
}



function random(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}
